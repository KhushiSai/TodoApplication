{"ast":null,"code":"const API_BASE_URL = 'http://jsonplaceholder.typicode.com/todos';\nexport class TodoApiService {\n  // GET - Fetch all todos\n  static async getAllTodos() {\n    try {\n      const response = await fetch(API_BASE_URL);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const todos = await response.json();\n      return todos;\n    } catch (error) {\n      console.error('Error fetching todos:', error);\n      throw error;\n    }\n  }\n\n  // GET - Fetch a single todo by ID\n  static async getTodoById(id) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/${id}`);\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const todo = await response.json();\n      return todo;\n    } catch (error) {\n      console.error(`Error fetching todo ${id}:`, error);\n      throw error;\n    }\n  }\n\n  // POST - Create a new todo\n  static async createTodo(todoData) {\n    try {\n      const response = await fetch(API_BASE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          ...todoData,\n          userId: 1 // Default user ID\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const newTodo = await response.json();\n      return newTodo;\n    } catch (error) {\n      console.error('Error creating todo:', error);\n      throw error;\n    }\n  }\n\n  // PUT - Update an existing todo\n  static async updateTodo(id, todoData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/${id}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(todoData)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const updatedTodo = await response.json();\n      return updatedTodo;\n    } catch (error) {\n      console.error(`Error updating todo ${id}:`, error);\n      throw error;\n    }\n  }\n\n  // PATCH - Partially update a todo\n  static async patchTodo(id, todoData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/${id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(todoData)\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      const updatedTodo = await response.json();\n      return updatedTodo;\n    } catch (error) {\n      console.error(`Error patching todo ${id}:`, error);\n      throw error;\n    }\n  }\n\n  // DELETE - Delete a todo\n  static async deleteTodo(id) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/${id}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n    } catch (error) {\n      console.error(`Error deleting todo ${id}:`, error);\n      throw error;\n    }\n  }\n}","map":{"version":3,"names":["API_BASE_URL","TodoApiService","getAllTodos","response","fetch","ok","Error","status","todos","json","error","console","getTodoById","id","todo","createTodo","todoData","method","headers","body","JSON","stringify","userId","newTodo","updateTodo","updatedTodo","patchTodo","deleteTodo"],"sources":["C:/Users/hp/Desktop/todo6/src/services/todoApi.ts"],"sourcesContent":["import { Todo, TodoFormData, ApiResponse } from '../types/Todo';\r\n\r\nconst API_BASE_URL = 'http://jsonplaceholder.typicode.com/todos';\r\n\r\nexport class TodoApiService {\r\n  // GET - Fetch all todos\r\n  static async getAllTodos(): Promise<Todo[]> {\r\n    try {\r\n      const response = await fetch(API_BASE_URL);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const todos: Todo[] = await response.json();\r\n      return todos;\r\n    } catch (error) {\r\n      console.error('Error fetching todos:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // GET - Fetch a single todo by ID\r\n  static async getTodoById(id: number): Promise<Todo> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/${id}`);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const todo: Todo = await response.json();\r\n      return todo;\r\n    } catch (error) {\r\n      console.error(`Error fetching todo ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // POST - Create a new todo\r\n  static async createTodo(todoData: TodoFormData): Promise<Todo> {\r\n    try {\r\n      const response = await fetch(API_BASE_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          ...todoData,\r\n          userId: 1, // Default user ID\r\n        }),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const newTodo: Todo = await response.json();\r\n      return newTodo;\r\n    } catch (error) {\r\n      console.error('Error creating todo:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // PUT - Update an existing todo\r\n  static async updateTodo(id: number, todoData: Partial<Todo>): Promise<Todo> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/${id}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(todoData),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const updatedTodo: Todo = await response.json();\r\n      return updatedTodo;\r\n    } catch (error) {\r\n      console.error(`Error updating todo ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // PATCH - Partially update a todo\r\n  static async patchTodo(id: number, todoData: Partial<Todo>): Promise<Todo> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/${id}`, {\r\n        method: 'PATCH',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(todoData),\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const updatedTodo: Todo = await response.json();\r\n      return updatedTodo;\r\n    } catch (error) {\r\n      console.error(`Error patching todo ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // DELETE - Delete a todo\r\n  static async deleteTodo(id: number): Promise<void> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/${id}`, {\r\n        method: 'DELETE',\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error deleting todo ${id}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}